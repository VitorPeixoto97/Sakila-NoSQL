// command to use the project database
// use nosql

// QUERYS //

// DONE - 5 costumers que mais alugueres efetuaram
// NOTA: nao estou a comecar no customer, 
//      pk me esqueci de colocar la uma lista com os IDs das rentals dele, 
//      com isso deve ficar bem mais rapida a query
db.rental.aggregate([
    {$lookup: {
        from: 'customer',
        localField: 'customer_id',
        foreignField: 'customer_id',
        as: 'CUSTOMER'
    }},
    {$unwind: '$CUSTOMER'},
    {$project:{
        _id:0,
        rental_id:1,
        customer_id:1,
        customer_name: "$CUSTOMER.name",
        active: "$CUSTOMER.active"
    }},
    {$match: {active:1}},
    {$group:{
        _id:{
            customer_id:'$customer_id',
            customer_name:'$customer_name'
        },
        numberRentals: {$sum: 1},
        listRentals: {$push: '$rental_id'}
    }},
    {$sort:{numberRentals:-1}},
    {$limit:10}
])


// HOLD - 5 costumers que mais filmes alugaram
// ??? Cada rental (só tem um inventory, e por sua vez) só tem um film, 
//      logo nRentals=nFilms alugados.



// DONE - 5 costumers que mais dinheiro gastaram no serviço
db.rental.aggregate([
    {$lookup: {
        from: 'customer',
        localField: 'customer_id',
        foreignField: 'customer_id',
        as: 'CUSTOMER'
    }},
    {$unwind: '$CUSTOMER'},
    {$project:{
        _id:0,
        rental_id:1,
        customer_id:1,
        customer_name: "$CUSTOMER.name",
        active: "$CUSTOMER.active",
        amount:1
    }},
    {$match: {active:1}},
    {$group:{
        _id: {
            customer_id:'$customer_id',
            customer_name:'$customer_name'
        },
        totalAmount: {$sum: '$amount'},
        listAmounts: {$push: '$amount'}
    }},
    {$sort:{totalAmount:-1}},
    {$limit:10}
])


// DONE - 5 filmes mais vistos
db.rental.aggregate([
    {$project:{
        _id:0,
        rental_id:1,
        film_id:1,
        film_title:1,
    }},
    {$group:{
        _id: {
            film_id: '$film_id',
            filmTitle: '$film_title'
        },
        nRentals: {$sum: 1},
        listAmounts: {$push: '$rental_id'}
    }},
    {$sort:{nRentals:-1}},
    {$limit:10}
])


// DONE - 5 staffs que mais dinheiro ganham
// NOTA: só há 2 staffs ._.
db.store.aggregate([
    {$project:{
        _id:0,
        store_id:1,
        staff:{
            staff_id:1,
            staff_name:1,
            active:1
        }
    }},
    {$unwind: '$staff'},
    {$match: {'staff.active':1}},
    {$group:{
        _id: {
            staff_id: '$staff.staff_id',
            staff_name: '$staff.staff_name',
        },
    }},
    {$lookup: {
        from: 'rental',
        localField: '_id.staff_id',
        foreignField: 'staff_id',
        as: 'RENTALS'
    }},
    {$unwind: '$RENTALS'},
    {$group:{
        _id: '$_id',
        totalAmount: {$sum: '$RENTALS.amount'},
        numberAmounts: {$sum: 1},
        // listAmounts: {$push: '$RENTALS.amount'}
    }},
    {$sort:{totalAmount:-1}},
    {$limit:10}
])


// Clientes que mais tempo demoram a devolver os filmes (média)


// Lojas com mais vendas/alugueres feitos
// NOTA: só há 2 stores ._.
db.rental.aggregate([
    {$group:{
        _id:{
            store_id:'$store_id',
        },
        numberRentals: {$sum: 1},
        // listRentals: {$push: '$rental_id'}
    }},
    {$sort:{numberRentals:-1}},
    {$limit:10}
])
