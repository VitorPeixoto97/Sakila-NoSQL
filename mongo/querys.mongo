// command to use the project database
// use nosql

// QUERYS //

// 5 costumers que mais alugueres efetuaram - DONE
// pode ficar mais rapida (i think)
db.customer.aggregate([
    {$match: {active:1}},
    {$lookup: {
        from: 'rental',
        localField: 'customer_id',
        foreignField: 'customer_id',
        as: 'RentalList'
    }},
    {$project: {
        _id:0,
        // customer_id:1,
        name:{$concat:["$first_name"," ","$last_name"]},
        // RentalList:{_id:0,rental_id:1,return_date:1},
        numberOfRentals:{$size:"$RentalList"},
    }},
    {$sort:{numberOfRentals:-1}},
    {$limit:5}
])


// 5 costumers que mais filmes alugaram - ON HOLD

// 5 costumers que mais dinheiro gastaram no serviço

// 5 filmes mais vistos

// 5 staffs que mais dinheiro ganham - DONE
db.staff.aggregate([
    {$match: {active:1}},
    {$lookup: {
        from: 'payment',
        localField: 'staff_id',
        foreignField: 'staff_id',
        as: 'PAYMENTS'
    }},
    {$project: {
        _id:0,
        // staff_id:1,
        name:{$concat:["$first_name"," ","$last_name"]},
        // PAYMENTS:{_id:0,rental_id:1,return_date:1},
        numberPayments:{$size:"$PAYMENTS"},
        totalMoneyPayments:{$sum:"$PAYMENTS.amount"},
    }},
    {$sort:{numberOfRentals:-1}},
    {$limit:5}
])


// Ator que o costumer X mais viu

// Clientes que mais tempo demoram a devolver os filmes (média)

// Lojas com mais vendas/alugueres pronto





// RANDOM STUFF //

// 5 costumers que mais filmes alugaram - quase
db.customer.aggregate([
    {$match: {active:1}},
    {$lookup: {
        from: 'rental',
        localField: 'customer_id',
        foreignField: 'customer_id',
        as: 'RentalList'}
    },
    {$lookup: {
        from: 'inventory',
        localField: 'RentalList.inventory_id',
        foreignField: 'inventory_id',
        as: 'INVENTARIO'}
    },
    {$project: {
        _id:0,
        // customer_id:1,
        first_name:1,
        // RentalList:{_id:0,rental_id:1,return_date:1},
        numRentals:{$size:"$RentalList"},
        // INVENTARIO:{inventory_id:1,film_id:1},
        // numInventorys:{$size:"$INVENTARIO"},
        // 'INVENTARIO.film_id':1,
        numFilms:{$size:"$INVENTARIO"},
    }},
    {$sort:{numFilms:-1}}
    // {$limit:20}
])




// querys de import
// NOTE tenho de dar um project melhor em todas as listas embebidas
// juntar o address embebido no customer
db.customer2.aggregate([
    {$lookup: {
        from: 'address_city_country2',
        localField: 'address_id',
        foreignField: 'address_id',
        as: 'address'
    }},
    {$unwind:'$address'},
    {$project:{
        '_id':0,
        'customer_id':1,
        'store_id':1,
        'name':1,
        'email':1,
        'active':1,
        'create_date':1,
        'address':{
            // 'address_id':0,
            'address':1,
            'district':1,
            'postal_code':1,
            'location':1,
            'city':1,
            'country':1,
            'phone':1,
            'last_update':1
        },
        'last_update':1
    }},
    {$out:'customer'}
])

// juntar a category & actor embebido no film
// NOTE cada film só tem uma categoria?!? wtf dudes
db.film2.aggregate([
    {$lookup: {
        from: 'category2',
        localField: 'film_id',
        foreignField: 'film_id',
        as: 'category'
    }},
    {$unwind:'$category'},
    {$lookup: {
        from: 'actor2',
        localField: 'film_id',
        foreignField: 'film_id',
        as: 'actor'
    }},
    {$project:{
        '_id':0,
        'film_id':1,
        'title':1,
        'description':1,
        'release_year':1,
        'language':1,
        'rental_duration':1,
        'rental_rate':1,
        'length':1,
        'replacement_cost':1,
        'rating':1,
        'special_features':1,
        'category':{
            'category_name':1,
            // 'last_update':1
        },
        'actor':{
            'actor_name':1,
            // 'last_update':1
        },
        'last_update':1
    }},
    {$out:'film'}
])



