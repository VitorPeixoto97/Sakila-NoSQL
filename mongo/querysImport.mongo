// TODO
// TODO: special_features(film) pode ser dividida numa lista

// testing

db.film.findOne()
db.film.aggregate([ 
    {'$project':{_id:0,film_id:1,available_stores:1,nhe:'nhe'}},
    {'$sort': {'film_id':1}} ])


// outras querys
db.storeAUX.aggregate([
    {$lookup: {
        from: 'staffAUX',
        localField: 'store_id',
        foreignField: 'store_id',
        as: 'staff'
    }},
    {$lookup: {
        from: 'inventoryAUX',
        localField: 'store_id',
        foreignField: 'store_id',
        as: 'available_films'
    }},
    {$unwind:'$staff'},
    {$unwind:'$available_films'},
    {$group:{
        '_id':'$_id',
        'manager_name':{'$first':'$manager_name'},
        'staff': {'$addToSet':{
            staff_name:'$staff.staff_name',
            email:'$staff.email',
            active:'$staff.active',
            username:'$staff.username',
            password:'$staff.password',
            last_update:'$staff.last_update',
            address:'$staff.address',
        }},
        'available_films': {'$addToSet':'$available_films.film_id'}
    }}
])


db.testing.find()
db.testing.update(
    {n:7},
    {$set: {
        dateMongo: {$dateFromString: {
            dateString:"date", 
            format:"%Y-%m-%d %H:%M:%S"
        }}
    }}
)
 db.testing.aggregate([
    {$match:{n:7}},
    {$project: {
        _id:0,
        date: {$dateFromString: {dateString:"$date",format:"%Y-%m-%d %H:%M:%S"}},
    }}
])   



db.rental.find({return_date:'\\N'})
db.rental.aggregate([
    {$match:{return_date:{$exists:false}}}
])
db.rental.aggregate([
    {$match:{return_date:{$exists:true}}}
])


db.rental.update({return_date: '\\N'},{$unset:{return_date:1}},{multi:true})

db.rental.aggregate([
    {$match:{return_date:{$exists:true}}},
    {$project:{
        rental_id:1,
        film_id:1,
        rental_date: {$dateFromString: {dateString:"$rental_date",format:"%Y-%m-%d %H:%M:%S"}},
        return_date:  {$dateFromString: {dateString:"$return_date",format:"%Y-%m-%d %H:%M:%S"}},
        staff_id:1,
        customer_id:1
    }}
])


db.rental.aggregate([
    {$group:{
        _id:{
            film_id:'$film_id',
            customer_id:'$customer_id'
        },
        rental_list:{$push:'$rental_id'}
    }},
    {$project:{
        size:{$size:'$rental_list'}
    }},
    {$sort:{size:-1}}
])



